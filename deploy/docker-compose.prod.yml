version: '3.8'

services:
  api:
    image: ghcr.io/jaceleedev/pot-play-storage:latest
    container_name: pot-storage-api
    restart: unless-stopped
    ports:
      - "127.0.0.1:8090:8090"
    environment:
      # Database Configuration
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_SSL_MODE=${DB_SSL_MODE:-require}
      
      # Redis Configuration
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      
      # Storage Configuration
      - STORAGE_TYPE=${STORAGE_TYPE:-seaweedfs}
      - STORAGE_LOCAL_PATH=${STORAGE_LOCAL_PATH:-/app/uploads}
      - SEAWEEDFS_MASTER_URL=${SEAWEEDFS_MASTER_URL:-seaweedfs-master:9333}
      
      # Security Configuration
      - API_KEY=${API_KEY}
      
      # Server Configuration
      - SERVER_PORT=${SERVER_PORT:-8090}
      - SERVER_READ_TIMEOUT=${SERVER_READ_TIMEOUT:-30s}
      - SERVER_WRITE_TIMEOUT=${SERVER_WRITE_TIMEOUT:-30s}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Application Environment
      - APP_ENV=production
      - GIN_MODE=release
    volumes:
      - ${UPLOAD_VOLUME_PATH:-./uploads}:/app/uploads
      - ${CONFIG_PATH:-./configs}:/app/configs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      seaweedfs-master:
        condition: service_started
      seaweedfs-volume:
        condition: service_started
      seaweedfs-filer:
        condition: service_started
    networks:
      - pot-storage-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:15-alpine
    container_name: pot-storage-postgres
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
      - ${POSTGRES_BACKUP_PATH:-./backups}:/backups
    networks:
      - pot-storage-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    container_name: pot-storage-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-}
      --maxmemory ${REDIS_MAX_MEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - pot-storage-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # SeaweedFS Services
  seaweedfs-master:
    image: chrislusf/seaweedfs:latest
    container_name: pot-storage-seaweedfs-master
    restart: unless-stopped
    command: >
      master 
      -ip=seaweedfs-master 
      -port=9333 
      -mdir=/data
      -volumeSizeLimitMB=${SEAWEEDFS_VOLUME_SIZE_LIMIT:-1000}
      -defaultReplication=${SEAWEEDFS_REPLICATION:-000}
    volumes:
      - seaweedfs_master_data:/data
    ports:
      - "127.0.0.1:9333:9333"
    networks:
      - pot-storage-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9333/cluster/status"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  seaweedfs-volume:
    image: chrislusf/seaweedfs:latest
    container_name: pot-storage-seaweedfs-volume
    restart: unless-stopped
    command: >
      volume 
      -ip=seaweedfs-volume 
      -port=8080 
      -dir=/data 
      -mserver=seaweedfs-master:9333
      -max=${SEAWEEDFS_MAX_VOLUMES:-100}
    volumes:
      - seaweedfs_volume_data:/data
    ports:
      - "127.0.0.1:8081:8080"
    depends_on:
      seaweedfs-master:
        condition: service_started
    networks:
      - pot-storage-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  seaweedfs-filer:
    image: chrislusf/seaweedfs:latest
    container_name: pot-storage-seaweedfs-filer
    restart: unless-stopped
    command: >
      filer 
      -ip=seaweedfs-filer 
      -port=8888 
      -master=seaweedfs-master:9333
      -collection=${SEAWEEDFS_COLLECTION:-pot-storage}
    volumes:
      - seaweedfs_filer_data:/data
    ports:
      - "127.0.0.1:8888:8888"
    depends_on:
      seaweedfs-master:
        condition: service_started
      seaweedfs-volume:
        condition: service_started
    networks:
      - pot-storage-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: nginx for SSL termination and reverse proxy
  # nginx:
  #   image: nginx:alpine
  #   container_name: pot-storage-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/pot-storage.conf:/etc/nginx/conf.d/default.conf:ro
  #     - /etc/letsencrypt:/etc/letsencrypt:ro
  #     - nginx_cache:/var/cache/nginx
  #   depends_on:
  #     - api
  #   networks:
  #     - pot-storage-network
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-./data/postgres}
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-./data/redis}
  seaweedfs_master_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SEAWEEDFS_MASTER_DATA_PATH:-./data/seaweedfs/master}
  seaweedfs_volume_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SEAWEEDFS_VOLUME_DATA_PATH:-./data/seaweedfs/volume}
  seaweedfs_filer_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${SEAWEEDFS_FILER_DATA_PATH:-./data/seaweedfs/filer}
  # nginx_cache:
  #   driver: local

networks:
  pot-storage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16