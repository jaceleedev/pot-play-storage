name: Pot-Play-Storage CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/pot-play-storage

jobs:
  # ===============================================
  # 1. 테스트 Job: Go 코드 테스트 및 빌드 검증
  # ===============================================
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_NAME: test_db
        DB_SSL_MODE: disable
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        API_KEY: test-api-key
      run: go test -v -race ./...

    - name: Build binary
      run: go build -o bin/server ./cmd/main.go

  # ===============================================
  # 2. 빌드 & 푸시 Job: Docker 이미지 빌드하고 GHCR에 푸시
  # ===============================================
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===============================================
  # 3. 배포 Job: 서버에 배포
  # ===============================================
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: root
        password: ${{ secrets.SSH_ROOT_PASSWORD }}
        script: |
          set -e
          
          # 1. 배포 디렉토리 확인 및 생성
          if [ ! -d /home/pot-play-storage ]; then
            echo "📁 배포 디렉토리를 생성합니다..."
            mkdir -p /home/pot-play-storage
            cd /home/pot-play-storage
            git clone https://github.com/${{ github.repository }}.git .
          else
            cd /home/pot-play-storage
          fi
          
          # 2. 최신 코드 pull
          echo "🔄 최신 코드를 가져옵니다..."
          git pull origin main
          
          # 3. 환경 변수 확인 및 생성
          if [ ! -f .env ]; then
            echo "⚠️ .env 파일이 없습니다. .env.example에서 복사합니다..."
            cp .env.example .env
            echo "✅ .env 파일이 생성되었습니다. (기본값 사용중)"
            echo "⚠️ 나중에 다음 값들을 수정하세요: DB_PASSWORD, REDIS_PASSWORD, API_KEY"
          fi
          
          # 4. deploy.sh 스크립트 실행 권한 부여
          echo "🔧 배포 스크립트 권한 설정..."
          chmod +x deploy.sh
          
          # 5. GHCR 로그인을 위한 환경변수 설정
          export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          export GITHUB_ACTOR="${{ github.actor }}"
          
          # 6. deploy.sh 스크립트로 배포
          echo "🚀 deploy.sh 스크립트로 배포 시작..."
          ./deploy.sh deploy
          
          # 7. 배포 결과 확인
          echo "📊 최종 배포 상태:"
          docker compose -f docker-compose.prod.yml ps